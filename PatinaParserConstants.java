/* Generated By:JavaCC: Do not edit this line. PatinaParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PatinaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 2;
  /** RegularExpression Id. */
  int BE = 3;
  /** RegularExpression Id. */
  int FALSE = 4;
  /** RegularExpression Id. */
  int FN = 5;
  /** RegularExpression Id. */
  int IF = 6;
  /** RegularExpression Id. */
  int LET = 7;
  /** RegularExpression Id. */
  int MUT = 8;
  /** RegularExpression Id. */
  int RETURN = 9;
  /** RegularExpression Id. */
  int SET = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int LARROW = 13;
  /** RegularExpression Id. */
  int RARROW = 14;
  /** RegularExpression Id. */
  int LPAR = 15;
  /** RegularExpression Id. */
  int RPAR = 16;
  /** RegularExpression Id. */
  int LCBR = 17;
  /** RegularExpression Id. */
  int RCBR = 18;
  /** RegularExpression Id. */
  int LSBR = 19;
  /** RegularExpression Id. */
  int RSBR = 20;
  /** RegularExpression Id. */
  int LABR = 21;
  /** RegularExpression Id. */
  int RABR = 22;
  /** RegularExpression Id. */
  int COLON = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int PERIOD = 25;
  /** RegularExpression Id. */
  int PLUS = 26;
  /** RegularExpression Id. */
  int MINUS = 27;
  /** RegularExpression Id. */
  int MULT = 28;
  /** RegularExpression Id. */
  int DIV = 29;
  /** RegularExpression Id. */
  int MOD = 30;
  /** RegularExpression Id. */
  int AMP = 31;
  /** RegularExpression Id. */
  int CARET = 32;
  /** RegularExpression Id. */
  int EXCLAMATION = 33;
  /** RegularExpression Id. */
  int PIPE = 34;
  /** RegularExpression Id. */
  int SHIFTL = 35;
  /** RegularExpression Id. */
  int SHIFTR = 36;
  /** RegularExpression Id. */
  int EQ = 37;
  /** RegularExpression Id. */
  int LEQ = 38;
  /** RegularExpression Id. */
  int GEQ = 39;
  /** RegularExpression Id. */
  int NEQ = 40;
  /** RegularExpression Id. */
  int IDENTIFIER = 41;
  /** RegularExpression Id. */
  int LETTER = 42;
  /** RegularExpression Id. */
  int DIGIT = 43;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 44;
  /** RegularExpression Id. */
  int FLOATING_LITERAL = 45;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<SINGLE_LINE_COMMENT>",
    "\"be\"",
    "\"false\"",
    "\"fn\"",
    "\"if\"",
    "\"let\"",
    "\"mut\"",
    "\"return\"",
    "\"set\"",
    "\"true\"",
    "\"while\"",
    "\"<-\"",
    "\"->\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"<\"",
    "\">\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"&\"",
    "\"^\"",
    "\"!\"",
    "\"|\"",
    "\"<<\"",
    "\">>\"",
    "\"=\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INTEGER_LITERAL>",
    "<FLOATING_LITERAL>",
  };

}
